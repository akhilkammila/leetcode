#include <string>
#include <vector>
#include <iostream>
#include <math.h>
using namespace std;

/*
Takeaways:
consider doing dp the other way around to make looping easier
be very mindful of integer overflow
(checking if < another number after doing a calculation does not work, have to check before calculation)
*/

#ifdef LOCAL
#define DEBUG(...) debug(#__VA_ARGS__, __VA_ARGS__)
#include </Users/akhilkammila/Competitive Programming/debug.h>
#else
#define DEBUG(...) 47;
#endif

class Solution {
public:
    const int mod = 1e9+7;

    int numberOfArrays(string s, int k) {
        vector<int> dp(s.size()+1);
        dp[0] = 1; // base case: no characters

        // dp recurrence
        for(int n = 1; n < s.size()+1; n++) {
            // look at previous states for transition
            long long addingNumber = 0;
            long long base = 1;

            for(int t = n-1; t>=0; t--) {
                if (t != n-1) base *= 10;
                if (base > k) break;
                if (s[t] == '0') continue; // prevent numbers starting with 0
                
                addingNumber += (s[t] - '0') * base;
                if (addingNumber > k) break; // eliminates unnecessary transitions
                dp[n] = (dp[n] + dp[t]) % mod;
            }
        }
        return dp[s.size()];
    }
};

int main() {
    Solution s = Solution();
    string inputS = "";
    int k = 1000000000;
    cout << s.numberOfArrays(inputS, k);
}